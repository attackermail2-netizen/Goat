#!/bin/bash

# Configuration
GITHUB_TOKEN="GITHUB_TOEKN"
GITHUB_REPO="GITHUB_REPO"
GITHUB_API="https://api.github.com"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse arguments
file=""
command=""
notification_mode="line"   # default
bulk_filename="results.txt"   # default

show_help() {
  echo "Usage: $0 -f <filename> -c <command> [-m line|bulk] [-b bulk_filename]"
  echo ""
  echo "Options:"
  echo "  -f <filename>       Input file to upload and process (required)"
  echo "  -c <command>        Command to execute on the file (required)"
  echo "  -m <mode>           Notification mode: 'line' (default) or 'bulk'"
  echo "  -b <bulk_filename>  Output filename for bulk mode (default: results.txt)"
  echo ""
  echo "Examples:"
  echo "  # Line mode (real-time notifications)"
  echo "  $0 -f domains.txt -c \"subfinder -silent | httpx -silent\""
  echo ""
  echo "  # Bulk mode (single file notification)"
  echo "  $0 -f urls.txt -c \"katana -silent -d 2 -jc\" -m bulk -b crawled.txt"
  echo ""
  echo "  # Complex pipeline with nuclei"
  echo "  $0 -f domains.txt -c \"subfinder -silent | httpx -silent | nuclei -es info\" -m bulk"
  echo ""
  echo "Available ProjectDiscovery tools:"
  echo "  - subfinder: Subdomain discovery"
  echo "  - httpx: Fast HTTP probe"
  echo "  - nuclei: Vulnerability scanner"
  echo "  - katana: Web crawler"
  echo "  - notify: Notification sender"
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -f)
      file="$2"
      shift 2
      ;;
    -c)
      command="$2"
      shift 2
      ;;
    -m)
      notification_mode="$2"
      shift 2
      ;;
    -b)
      bulk_filename="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      echo -e "${RED}[!] Unknown argument: $1${NC}"
      show_help
      exit 1
      ;;
  esac
done

# Validate arguments
if [[ -z "$file" ]]; then
  echo -e "${RED}[!] You must provide an input file with -f${NC}"
  show_help
  exit 1
fi

if [[ -z "$command" ]]; then
  echo -e "${RED}[!] You must provide a command with -c${NC}"
  show_help
  exit 1
fi

if [[ ! -f "$file" ]]; then
  echo -e "${RED}[!] Input file $file not found${NC}"
  exit 1
fi

# Validate notification mode
if [[ "$notification_mode" != "line" && "$notification_mode" != "bulk" ]]; then
  echo -e "${RED}[!] Invalid notification mode: $notification_mode${NC}"
  echo "Valid modes are: line, bulk"
  exit 1
fi

if [[ -z "$GITHUB_TOKEN" ]]; then
  echo -e "${RED}[!] GITHUB_TOKEN environment variable not set${NC}"
  echo "Export your GitHub token: export GITHUB_TOKEN=your_token_here"
  exit 1
fi

# Get just the filename without path
filename=$(basename "$file")

# Check file size (GitHub has ~25MB limit for base64 content)
file_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
max_size=$((18 * 1024 * 1024))  # 18MB limit to account for base64 encoding overhead

if [[ $file_size -gt $max_size ]]; then
  echo -e "${RED}[!] File is too large ($file_size bytes). Maximum size is ~18MB${NC}"
  exit 1
fi

echo -e "${BLUE}[*] Starting upload and workflow trigger...${NC}"
echo -e "${YELLOW}[*] File: $filename ($(( file_size / 1024 ))KB)${NC}"
echo -e "${YELLOW}[*] Command: $command${NC}"
echo -e "${YELLOW}[*] Notification Mode: $notification_mode${NC}"
if [[ "$notification_mode" == "bulk" ]]; then
  echo -e "${YELLOW}[*] Bulk Filename: $bulk_filename${NC}"
fi

# Check for jq dependency
if ! command -v jq &> /dev/null; then
    echo -e "${RED}[!] jq is required but not installed${NC}"
    echo "Install with: sudo apt install jq  # or  brew install jq"
    exit 1
fi

# Check if file exists in repo upload directory (to get SHA for override)
echo -e "${BLUE}[*] Checking if file exists in repo upload directory...${NC}"
sha_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
  "$GITHUB_API/repos/$GITHUB_REPO/contents/upload/$filename")

sha=""
if echo "$sha_response" | jq -e '.sha' >/dev/null 2>&1; then
  sha=$(echo "$sha_response" | jq -r '.sha')
  echo -e "${YELLOW}[*] File exists, will override (SHA: ${sha:0:8}...)${NC}"
else
  echo -e "${BLUE}[*] New file will be created in upload directory${NC}"
fi

# Create temporary file for JSON payload
temp_json=$(mktemp)
temp_b64=$(mktemp)
trap "rm -f $temp_json $temp_b64" EXIT

# Create base64 content in temporary file
echo -e "${BLUE}[*] Encoding file to base64...${NC}"
base64 -w 0 "$file" > "$temp_b64"

# Create JSON payload using a here-document approach
echo -e "${BLUE}[*] Preparing upload payload...${NC}"

# Build JSON step by step
echo '{' > "$temp_json"
echo "  \"message\": \"Upload $filename for scanning\"," >> "$temp_json"
echo -n "  \"content\": \"" >> "$temp_json"
cat "$temp_b64" >> "$temp_json"
echo "\"" >> "$temp_json"

if [[ -n "$sha" ]]; then
  echo ",  \"sha\": \"$sha\"" >> "$temp_json"
fi

echo '}' >> "$temp_json"

# Upload file to GitHub upload directory
echo -e "${BLUE}[*] Uploading file to GitHub upload directory...${NC}"
upload_response=$(curl -s -X PUT \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Content-Type: application/json" \
  -d @"$temp_json" \
  "$GITHUB_API/repos/$GITHUB_REPO/contents/upload/$filename")

if echo "$upload_response" | jq -e '.content' >/dev/null 2>&1; then
  echo -e "${GREEN}[+] File uploaded successfully${NC}"
else
  echo -e "${RED}[!] File upload failed${NC}"
  echo "$upload_response" | jq '.' 2>/dev/null || echo "$upload_response"
  exit 1
fi

# Trigger GitHub workflow with updated parameters
echo -e "${BLUE}[*] Triggering GitHub workflow...${NC}"

# Build workflow payload with proper parameter names matching the workflow
workflow_payload='{
  "ref": "main",
  "inputs": {
    "file_name": "'"$filename"'",
    "command": "'"$command"'",
    "notification_mode": "'"$notification_mode"'"'

# Add bulk_filename only if in bulk mode
if [[ "$notification_mode" == "bulk" ]]; then
  workflow_payload+=',
    "bulk_filename": "'"$bulk_filename"'"'
fi

workflow_payload+='
  }
}'

echo -e "${BLUE}[*] Workflow payload:${NC}"
echo "$workflow_payload" | jq '.' 2>/dev/null || echo "$workflow_payload"

workflow_response=$(curl -s -X POST \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$workflow_payload" \
  "$GITHUB_API/repos/$GITHUB_REPO/actions/workflows/nuclei.yml/dispatches")

if [[ -z "$workflow_response" ]]; then
  echo -e "${GREEN}[+] Workflow triggered successfully${NC}"
  echo -e "${GREEN}[+] Check your Telegram for results${NC}"
  echo -e "${BLUE}[*] Monitor workflow: https://github.com/$GITHUB_REPO/actions${NC}"
  
  # Show mode-specific info
  if [[ "$notification_mode" == "line" ]]; then
    echo -e "${BLUE}[*] Line mode: You'll receive real-time notifications as results are found${NC}"
  else
    echo -e "${BLUE}[*] Bulk mode: You'll receive a single file ($bulk_filename) with all results${NC}"
    echo -e "${BLUE}[*] Results will also be available as GitHub Actions artifacts${NC}"
  fi
else
  echo -e "${RED}[!] Workflow trigger failed${NC}"
  echo "$workflow_response" | jq '.' 2>/dev/null || echo "$workflow_response"
  exit 1
fi

echo -e "${GREEN}[+] Process completed successfully${NC}"
